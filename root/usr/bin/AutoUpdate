#!/bin/sh
# AutoBuild Module by Hyy2001
# AutoUpdate for Openwrt
# /usr/bin/AutoUpdate

# 定义全局变量
DOWNLOAD_PATH="/tmp/Downloads"
tmpcloud_version="/tmp/cloud_version"
tmpapi_version="/tmp/api_version"
Select=""

# TIME 函数，用于记录时间和输出信息，并根据不同的操作码执行不同的操作
# 参数 $1: 操作码，取值为 'r'（出错并退出）, 'g'（正常输出）, 'z'（正常输出并退出）, 'y'（正常输出并标记更新）
# 参数 $2: 要输出的信息
TIME() {
    date=$(date "+%Y年%m月%d日%H时%M分%S秒")
    case $1 in
        r) 
            echo "${2}" > "$tmpcloud_version"
            printf "%s(出错)：%s\n" "$date" "${2}"
            exit 1
            ;;
        g)
            echo "${2}" > "$tmpcloud_version"
            printf "%s：%s\n" "$date" "${2}"
            ;;
        z)
            echo "${2}" > "$tmpcloud_version"
            printf "%s：%s\n" "$date" "${2}"
            exit 0
            ;;
        y)
            echo "${2}" > "$tmpcloud_version"
            echo "update" > /tmp/compare_version
            printf "%s：%s\n" "$date" "${2}"
            ;;
    esac
}

# Remote_detection 函数，用于远程检测必要文件和获取 API 数据
Remote_detection() {
    # 清理临时版本文件
    rm -rf "${tmpcloud_version}" >/dev/null 2>&1
    rm -rf "tmp/tags_version" >/dev/null 2>&1

    # 检查 openwrt_update 文件是否包含必要信息
    if grep -E "GITHUB_LINK" "/etc/openwrt_update" >/dev/null 2>&1 && \
       grep -E "RELEASE_DOWNLOAD" "/etc/openwrt_update" >/dev/null 2>&1; then
        chmod 755 /etc/openwrt_update
        . /etc/openwrt_update
    else
        TIME r "缺少openwrt_update文件"
    fi

    if [ -f "$tmpapi_version" ]; then
        VERSION_URL=$(grep -Eo 'https://github.com/[^/]*\/[^/]*/releases/download' "$tmpapi_version" |head -n 1 |sed 's/\/releases.*//g')
        if [ "$VERSION_URL" != "$GITHUB_LINK" ]; then
           rm -rf "$tmpapi_version"
        fi
    fi

    # 清理下载进程
    if [ -f "/tmp/autoupgrade.pid" ]; then
        for tool in "wget" "uclient-fetch" "curl"; do
            # 获取使用该工具的进程 ID
            PROCESS_IDS=$(ps | grep "$tool" | grep -v grep | awk '{print $1}')
            # 如果找到进程 ID，则尝试结束进程
            if [ -n "$PROCESS_IDS" ]; then
                for pid in $PROCESS_IDS; do
                    TIME g "结束 $pid 下载进程"
                    kill $pid
                    # 检查进程是否仍然存在，如果存在则发送 KILL 信号强制终止
                    if ps | grep "$pid" | grep -v grep > /dev/null; then
                        kill -9 $pid
                    fi
                done
            fi
        done
    fi

    # 检查api文件，不超过5分钟不需要重新下载
    if [ -f "${tmpapi_version}" ] && [ -f "/tmp/autotimes" ]; then
        file_info=$(ls -l --full-time "${tmpapi_version}" 2>/dev/null)
        if [ -n "$file_info" ]; then
            file_time=$(echo "$file_info" | awk '{print $6, $7}')
            file_mtime=$(date -d "$file_time" +%s 2>/dev/null)
            TIME g "文件时间戳：$file_mtime"
            if [ $? -eq 0 ]; then
                current_time=$(date +%s)
                TIME g "系统时间戳：$current_time"
                time_diff=$(( (current_time - file_mtime) / 60 ))
                TIME g "比对后的时间：$time_diff"
                [ $time_diff -ge 5 ] && \
                if ! uclient-fetch --no-check-certificate --timeout=40 "${RELEASE_DOWNLOAD1}/zzz_api" -O "$tmpapi_version"; then
                    # 若 wget 失败，使用 uclient-fetch 下载
                    wget -q --show-progress --no-check-certificate --no-use-server-timestamps --timeout=40 -t 1 "${RELEASE_DOWNLOAD2}/zzz_api" -O "$tmpapi_version"
                fi
            fi
        fi
    else
        if ! uclient-fetch --no-check-certificate --timeout=40 "${RELEASE_DOWNLOAD1}/zzz_api" -O "$tmpapi_version"; then
          # 若 wget 失败，使用 uclient-fetch 下载
          wget -q --show-progress --no-check-certificate --no-use-server-timestamps --timeout=40 -t 1 "${RELEASE_DOWNLOAD2}/zzz_api" -O "$tmpapi_version"
        fi
    fi

    # 检查 API 数据是否包含有效信息
    if ! grep -E "assets" "$tmpapi_version" >/dev/null 2>&1; then
        TIME r "获取API数据失败,Github地址不正确?，或此地址没云端存在，或您的仓库为私库，或网络抽风了再次尝试看看?"
    else
        TIME g "获取API数据成功!"
    fi
}

# Remote_information 函数，用于获取固件信息并进行版本比较
Remote_information() {
    # 根据目标板和固件后缀确定引导类型
    if [ "${TARGET_BOARD}" = "x86" ]; then
        if [ -d '/sys/firmware/efi' ]; then
            BOOT_TYPE=uefi
        else
            BOOT_TYPE=legacy
        fi
    elif [ "${FIRMWARE_SUFFIX}" = ".img.gz" ]; then
        BOOT_TYPE=legacy
    else
        BOOT_TYPE=sysupgrade
    fi

    # 定义正则表达式以匹配固件信息
    regex="https://.*${LUCI_EDITION}-${SOURCE}-${DEVICE_MODEL}-[0-9]+-${BOOT_TYPE}-.*${FIRMWARE_SUFFIX}"
    # 查找匹配的目标行
    target_line=$(grep -E "$regex" "$tmpapi_version" | tail -n 1)
    if [ -n "$target_line" ]; then
        # 从目标行中提取固件全名称
        start_str="${LUCI_EDITION}-${SOURCE}-${DEVICE_MODEL}-"
        REMOTE_FIRMWARE=$(echo "$target_line" | awk -v pattern="$regex" -v start="$start_str" -F'"' '{
            for(i=1; i<=NF; i++) {
                if($i ~ pattern) {
                    print substr($i, index($i, start))
                    break
                }
            }
        }')

        # 提取云端版本号
        CLOUD_VERSION=$(echo "$REMOTE_FIRMWARE" | grep -oE '[0-9]{10,}' | head -n 1)
        # 提取云端固件的MD5值
        CLOUD_MD256=$(echo "$REMOTE_FIRMWARE" | grep -oE "$BOOT_TYPE-([a-zA-Z0-9]{6})\\." | cut -d '-' -f 2 | cut -d '.' -f 1)
        # 提取云端固件的大小
        X=$(grep -n "$REMOTE_FIRMWARE" "$tmpapi_version" | tail -1 | cut -d : -f 1)
        CLOUD_FIRMWARE_SIZE=$(expr $(sed -n "$((X - 4))p" "$tmpapi_version" | grep -Eo "[0-9]+" | awk '{print ($1)/1048576}' | awk -F. '{print $1}') + 1)
        TIME g "固件全名称: $REMOTE_FIRMWARE"
        TIME g "固件时间戳: $CLOUD_VERSION"
        TIME g "固件MD5值: $CLOUD_MD256"
        TIME g "大小 (MB): $CLOUD_FIRMWARE_SIZE"
    else
        TIME r "获取固件信息失败"
    fi

    # 获取固件内核版本
    KERNEL_MODE=$(uname -rs | cut -d ' ' -f2)
    # 获取固件 /tmp 空间可用值
    TMP_AVAILABLE=$(df -m | grep "/tmp" | awk '{print $4}' | awk 'NR==1' | awk -F. '{print $1}')
    # 获取固件主机名称
    EQUIPMENT_NAME=$(awk -F': ' '/model name/ {print $2; exit}' /proc/cpuinfo)
    # 获取本地版本号
    LOCAL_VERSION=$(echo "${FIRMWARE_VERSION}" | awk -F'-' '{print $NF}')
    # 构建云端版本显示名称
    CLOUD_FIRMWARE_VERSION="${SOURCE}-${DEVICE_MODEL}-${CLOUD_VERSION}"

    # 检查本地版本号是否获取成功
    if [ -z "${LOCAL_VERSION}" ]; then
        TIME r "未知原因,获取本地版本号失败!"
    else
        TIME g "获取本地版本号 ${CLOUD_VERSION} 成功!"
    fi

    # 检查云端版本号是否获取成功
    if [ -z "${CLOUD_VERSION}" ]; then
        TIME r "获取云端信息失败,x86注意本地跟云端固件显示的引导模式是否一致,或者就是云端压根就没您同类型的固件存在,或者作者更了固件获取条件导致您本地跟云端信息不一致!"
    else
        TIME g "获取云端版本号 ${CLOUD_VERSION} 成功!"
    fi

    # 检查 /tmp 空间是否足够下载固件
    if [ "$TMP_AVAILABLE" -lt "$CLOUD_FIRMWARE_SIZE" ]; then
        TIME r "固件tmp空间值[${TMP_AVAILABLE}M],云端固件体积[${CLOUD_FIRMWARE_SIZE}M],路由器空间不足"
    else
        TIME g "固件tmp空间值[${TMP_AVAILABLE}M],云端固件体积[${CLOUD_FIRMWARE_SIZE}M],路由器空间可下载固件"
    fi

    # 生成Luci页面显示信息
    echo "MODEL_TYPE=\"${BOOT_TYPE}${FIRMWARE_SUFFIX}\"" > /tmp/tags_version
    echo "KERNEL_TYPE=\"${KERNEL_MODE} - ${LUCI_EDITION}\"" >> /tmp/tags_version
    echo "EQUIPMENT_NAME=\"${EQUIPMENT_NAME}\"" >> /tmp/tags_version

    # 比较本地版本号和云端版本号
    if [ -n "${LOCAL_VERSION}" ] && [ -n "${CLOUD_VERSION}" ]; then
        if [ "$LOCAL_VERSION" -eq "$CLOUD_VERSION" ]; then
            TIME z "${CLOUD_FIRMWARE_VERSION} [已是最新]"
        elif [ "$LOCAL_VERSION" -lt "$CLOUD_VERSION" ]; then
            TIME y "${CLOUD_FIRMWARE_VERSION} [有可更新固件]"
        elif [ "$LOCAL_VERSION" -gt "$CLOUD_VERSION" ]; then
            TIME z "${CLOUD_FIRMWARE_VERSION} [云端最高版本固件,低于您现在所使用版本,请到云端查看原因]"
        fi
    fi
}

# Remote_download 函数，用于远程下载固件并进行 MD5 校验和备份操作
Remote_download() {
    # 创建下载目录并清理旧文件
    if [ ! -d "${DOWNLOAD_PATH}" ]; then
        mkdir -p "${DOWNLOAD_PATH}"
    else
        rm -rf "${DOWNLOAD_PATH}"/*
    fi

    TIME g "开始下载云端固件"
    if [ "$(curl -I -s --connect-timeout 8 google.com -w %{http_code} | tail -n1)" = "301" ]; then
        echo "${RELEASE_DOWNLOAD2}/${REMOTE_FIRMWARE}"
        if ! wget -q --show-progress --no-check-certificate -t 1 "${RELEASE_DOWNLOAD2}/${REMOTE_FIRMWARE}" -O "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"; then
          # 若 wget 失败，使用 uclient-fetch 下载
          uclient-fetch --no-check-certificate --timeout=600 "${RELEASE_DOWNLOAD1}/${REMOTE_FIRMWARE}" -O "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"
        fi
    else
        echo "${RELEASE_DOWNLOAD1}/${REMOTE_FIRMWARE}"
        if ! wget -q --show-progress --no-check-certificate -t 1 "${RELEASE_DOWNLOAD1}/${REMOTE_FIRMWARE}" -O "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"; then
          # 若 wget 失败，使用 uclient-fetch 下载
          uclient-fetch --no-check-certificate --timeout=600 "${RELEASE_DOWNLOAD2}/${REMOTE_FIRMWARE}" -O "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"
        fi
    fi

    # 检查下载是否成功
    if [ $? -eq 0 ]; then
        TIME g "云端固件 ${REMOTE_FIRMWARE} 下载成功"
    else
        TIME r "云端固件 ${REMOTE_FIRMWARE} 下载失败"
    fi

    # 计算本地固件的 MD5 和 SHA256 组合值
    LOCAL_MD5256=$(md5sum "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}" | cut -c1-3)$(sha256sum "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}" | cut -c1-3)
    CLOUD_MD5256="${CLOUD_MD256}"

    # 进行 MD5 校验
    if [ "$CLOUD_MD5256" != "$LOCAL_MD5256" ]; then
        TIME r "MD5对比失败,固件可能在下载时损坏,请检查网络后重试!"
    else
        chmod 755 "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"
        TIME g "MD5对比成功"
    fi

    # 移除 gzip 包
    if opkg list | awk '{print $1}' | grep -E 'gzip' >/dev/null 2>&1; then
        opkg remove gzip > /dev/null 2>&1
    fi
    
    if [ "${Select}" = "u" ]; then
        TIME g "正在执行更新固件前的备份"
        # 执行删除文件操作
        if [ -f "/etc/deletefile" ]; then
           . /etc/deletefile
        fi
        # 清理配置文件
        rm -rf /etc/config/luci /tmp/luci
        # 添加定时任务
        sed -i '/check_network/d' /etc/crontabs/root >/dev/null 2>&1
        echo "*/10 * * * * /usr/bin/check_network" >> /etc/crontabs/root
        # 重启 cron 服务
        /etc/init.d/cron restart
        # 备份系统
        rm -rf /mnt/*upback.tar.gz
        sysupgrade -b /mnt/upback.tar.gz

        # 根据备份情况选择升级命令
        if ls -1 /mnt | grep -E 'upback.tar.gz' >/dev/null 2>&1; then
            UPGRADE_COMMAND='sysupgrade -F -f /mnt/upback.tar.gz'
        else
            UPGRADE_COMMAND='sysupgrade -F -q'
        fi
        TIME g "备份完成"
    else
        UPGRADE_COMMAND='sysupgrade -F -n'
        TIME g "启用不保留配置更新"
    fi

    TIME g "升级固件中，请勿断开路由器电源，END"
    ${UPGRADE_COMMAND} "${DOWNLOAD_PATH}/${REMOTE_FIRMWARE}"
}

# 根据命令行参数执行相应操作
case "$1" in
    "-u")
        Select="u"
        Remote_detection
        Remote_information
        Remote_download
        ;;
    "-k")
        Select="k"
        Remote_detection
        Remote_information
        Remote_download
        ;;
    *)
        Remote_detection
        Remote_information
        ;;
esac
